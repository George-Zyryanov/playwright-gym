# Name of the GitHub Actions workflow
name: Playwright Github Actions

# Define when to trigger this workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the jobs to run in this workflow
jobs:
  # Define a job named 'build'
  build:
    # Specify the operating system for this job
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}

    # Define the steps to execute in this job
    steps:
      # Step to checkout the source code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step to set up the Node.js version
      - name: Install node js v20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Step to install Node.js dependencies
      - name: Install dependencies
        run: npm ci

      # Step to install Chrome browser for Playwright
      - name: Install Chrome browser for Playwright
        run: npx playwright install chrome

      # Step to run tests with qa as environment variable similarly we can define qa|dev|qaApi|devApi
      - name: Run tests
        run: npm run test:single
        env:
          npm_config_ENV: "qa"

      # Step to wait for the job to complete
      - name: Wait for job completion
        # Adjust the wait time as needed
        run: sleep 10s
        # This step should always run, even if previous steps fail
        if: always()

      # Check if HTML report exists
      - name: Check if HTML report exists
        run: |
          if [ -d "html-report" ]; then
            echo "HTML report exists."
          else
            echo "HTML report does not exist. Exiting..."
            exit 1
          fi
        if: always()

      # Step to zip html-report folder
      - name: Zip HTML report
        run: zip -r html-report.zip html-report
        # This step should always run, even if previous steps fail
        if: always()

      # Step to upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: html-report.zip
          if-no-files-found: error
        if: always()

      # Step to generate artifact link
      - name: Generate artifact link
        id: artifact_link
        run: echo "artifact_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
        if: always()

      # Send Slack notification with html-reprt url once the tests are completed
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2.2.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: "#playwright-test-reports"
          SLACK_USERNAME: Playwright GitHub Actions
          SLACK_MESSAGE: "Test results are available in [Artifacts section](${{ steps.artifact_link.outputs.artifact_url }}) as html-report."
        if: always()

  # Updated job for deploying to GitHub Pages with versioning
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: html-report
          path: downloaded-artifact

      - name: Extract HTML report
        run: |
          echo "Listing downloaded artifacts:"
          ls -la html-report.zip
          mkdir -p temp-extract
          
          # Extract the artifact to a temporary location
          unzip -o html-report.zip -d temp-extract
          
          echo "Temporary extraction contents:"
          ls -la temp-extract
          
          # Create the html-report directory
          mkdir -p html-report
          
          # Handle nested html-report directory if it exists
          if [ -d "temp-extract/html-report" ]; then
            echo "Found nested html-report directory"
            cp -r temp-extract/html-report/* html-report/
          else
            echo "No nested directory, copying directly"
            cp -r temp-extract/* html-report/
          fi
          
          echo "Final html-report contents:"
          ls -la html-report

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2

      - name: Configure Git
        run: |
          git config --global user.email "georgezyryanov@gmail.com"
          git config --global user.name "George Zyryanov"

      - name: Generate index page and prepare reports
        run: |
          python -c "
          import os
          import json
          import shutil
          from datetime import datetime
          from jinja2 import Template
          import glob
          
          # Get commit info
          commit_sha = \"${{ github.sha }}\"
          commit_message = \"${{ github.event.head_commit.message }}\"
          run_number = ${{ github.run_number }}
          run_id = \"${{ github.run_id }}\"
          
          # Create directory for this run
          report_dir = f'reports/{commit_sha}'
          os.makedirs(report_dir, exist_ok=True)
          
          # Check if html-report exists and has content
          if os.path.exists('html-report'):
              # List all files in html-report
              print('Files in html-report:')
              for root, dirs, files in os.walk('html-report'):
                  for file in files:
                      print(os.path.join(root, file))
              
              # Copy files directly to the report directory, not to a nested html-report folder
              print(f'Copying html-report/* to {report_dir}/')
              os.system(f'cp -r html-report/* {report_dir}/')
          else:
              print('html-report directory not found, creating a simple index.html')
              with open(f'{report_dir}/index.html', 'w') as f:
                  f.write('<html><body><h1>Playwright Test Report</h1><p>Run #' + str(run_number) + '</p></body></html>')
          
          # Create or update reports.json
          report_data = {
              'sha': commit_sha,
              'message': commit_message,
              'run_number': run_number,
              'run_id': run_id,
              'timestamp': datetime.now().isoformat(),
              'url': f'reports/{commit_sha}/index.html'
          }
          
          # Load existing reports or create new list
          reports = []
          if os.path.exists('reports.json'):
              try:
                  with open('reports.json', 'r') as f:
                      reports = json.load(f)
              except json.JSONDecodeError:
                  reports = []
          
          # Add new report to the beginning
          reports.insert(0, report_data)
          
          # Keep only last 10 reports
          reports = reports[:10]
          
          # Save updated reports.json
          with open('reports.json', 'w') as f:
              json.dump(reports, f, indent=2)
          
          # Generate index.html with links to all reports
          template = Template('''
          <!DOCTYPE html>
          <html>
          <head>
              <title>Playwright Test Reports</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .report { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
                  .commit-message { color: #666; }
                  .timestamp { color: #888; font-size: 0.9em; }
                  a { color: #0366d6; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>Playwright Test Reports</h1>
              {% for report in reports %}
              <div class='report'>
                  <h2><a href='{{ report.url }}'>Run #{{ report.run_number }}</a></h2>
                  <div class='commit-message'>{{ report.message }}</div>
                  <div class='timestamp'>{{ report.timestamp }}</div>
                  <div>Commit: {{ report.sha[:7] }}</div>
              </div>
              {% endfor %}
          </body>
          </html>
          ''')
          
          with open('index.html', 'w') as f:
              f.write(template.render(reports=reports))
          "
          
      # Verify directory structure before upload
      - name: Verify directory structure
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Reports directory structure:"
          ls -la reports/ || echo "No reports directory found"
          if [ -d "reports" ]; then
            for dir in reports/*/; do
              echo "Contents of $dir:"
              find "$dir" -type f | sort
              if [ -f "$dir/index.html" ]; then
                echo "✓ index.html found in $dir"
              else
                echo "✗ NO index.html found in $dir"
              fi
            done
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
